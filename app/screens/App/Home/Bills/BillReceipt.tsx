import { Alert, StyleSheet, View } from 'react-native';
import { captureRef } from 'react-native-view-shot';
import { useRef } from 'react';
import * as Sharing from 'expo-sharing';
import * as MediaLibrary from 'expo-media-library';

import {
  Button,
  Container,
  Divider,
  Header,
  ReceiptListItem,
  Text,
  VirtualScroll,
} from 'components';
import { Logo } from 'assets';
import { AppRoutes, BillRoutes, RootNavigationProp } from 'navigation';
import { formatCurrency } from 'utils';
import { useSelector } from 'store';
import { layout, pallets } from 'constant';

export default function BillReceipt({
  route,
  navigation,
}: RootNavigationProp<AppRoutes, BillRoutes, 'BillReceipt'>): JSX.Element {
  const { params } = route;
  const { user } = useSelector(state => state.auth);
  const [status, requestPermission] = MediaLibrary.usePermissions();
  const ref = useRef<View>(null);

  const date = new Date();

  const filename = `Transaction Receipt for ${params.label}`;

  const handleShareReceipt = async () => {
    if (ref.current) {
      try {
        const uri = await captureRef(ref, {
          fileName: filename,
          format: 'png',
          quality: 1,
        });

        await Sharing.shareAsync(uri, { mimeType: 'image/png' });
        Alert.alert('', 'Success', [
          {
            onPress() {
              navigation.navigate('TabStack', { screen: 'Home' });
            },
            text: 'OK',
          },
        ]);
      } catch {
        Alert.alert('', 'Error sharing receipt');
      }
    }
  };

  const handleDownloadReceipt = async () => {
    if (status === null) {
      requestPermission();
    } else if (ref.current) {
      try {
        const uri = await captureRef(ref, {
          fileName: filename,
          format: 'png',
          quality: 1,
        });

        await MediaLibrary.saveToLibraryAsync(uri);
        Alert.alert('', 'Success', [
          {
            onPress() {
              navigation.navigate('TabStack', { screen: 'Home' });
            },
            text: 'OK',
          },
        ]);
      } catch {
        Alert.alert('', 'Error downloading receipt');
      }
    }
  };

  return (
    <>
      <Header />
      <VirtualScroll>
        <Container paddingHorizontal={0}>
          <View ref={ref} style={styles.container}>
            <Logo name="logo" size="50%" style={{ alignSelf: 'center' }} />
            <ReceiptListItem
              label="Transaction"
              value={formatCurrency(Number(params.amount) / 100)}
              value2={date.toLocaleDateString('en-us', {
                day: 'numeric',
                month: 'short',
                year: 'numeric',
              })}
            />
            <ReceiptListItem
              label="BENEFICIARY"
              value={params.label}
              value2={params.customerId}
              value3={params?.customerEmail}
            />
            <ReceiptListItem
              label="SENDER"
              value={user?.fullName || ''}
              value2={params.account}
              value3="Awacash"
            />
            <ReceiptListItem label="Status" value={'Successful'} />
            <ReceiptListItem label="Narration" value={params.label} />
            <Divider />
          </View>
        </Container>
        <View style={styles.noticeBox}>
          <Text variant="bold-700">Notice</Text>
          <Divider space="s" />
          <Text>
            This is an auto generated transaction receipt. {'\n'}
            This is an authentic receipt. {'\n'}
            Generated by Awacash MFB App.
          </Text>
        </View>
        <Container>
          <Button label="Share Receipt" onPress={handleShareReceipt} />
          <Divider space="s" />
          <Button
            label="Download Receipt"
            variant="outline"
            onPress={handleDownloadReceipt}
          />
        </Container>
        <Divider />
      </VirtualScroll>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: pallets.white,
    flex: 1,
    paddingHorizontal: layout.spacing.padding,
  },
  noticeBox: {
    backgroundColor: pallets.lightBlue2,
    padding: 20,
  },
});
